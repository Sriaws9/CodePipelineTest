version: 0.2
env:
  variables:
    CF_TAGS_FILE_PATH: ./tags.json
phases:
  install:
    commands:
      #Install the cfn-lint plugin
      - pip install cfn-lint
  pre_build:
    commands:
      - echo "pre build"
      - cfn-lint $S3_CF_TEMPLATE      
     
  build:
    commands:
      - echo "build stage"
      - ls -lrth
      - echo $S3_CF_TEMPLATE
      - echo $S3_CF_TEMPLATE_VALUES
      #- export BUCKET_NAME=$(cat $S3_CF_TEMPLATE_VALUES | jq -r .[0].'ParameterValue')
      - export BUCKET_NAME=$(cat $S3_CF_TEMPLATE_VALUES | jq .[0] | jq 'split("=")' | jq -r .[1])
      - echo $BUCKET_NAME
      - export EVN=$(cat $S3_CF_TEMPLATE_VALUES | jq .[1] | jq 'split("=")' | jq -r .[1])
      - |
        if [[ "$s1" == "QA" ]]
        then
          echo "match"
          CREDENTIALS=$(aws sts assume-role --role-arn arn:aws:iam::$AWS_ACCOUNT_ID:role/$EKS_DEPLOY_IAM_ROLE_ARN --role-session-name deploy-documentum --duration-seconds 3600)
          export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
          export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
          export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
          export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
        
          echo "verifying the profile"      
          aws sts get-caller-identity
      - echo "update kube config to connect with cluster"
        fi
        
         #Add the dev to the bucket name of the bucket name
        
       #- chmod 775 scripts/create_update_stack.sh
       #Update the bucket name with env
       

       - aws cloudformation deploy --stack-name  ${BUCKET_NAME}-stack --template-file $S3_CF_TEMPLATE --parameter-overrides file://$S3_CF_TEMPLATE_VALUES --tags file://$CF_TAGS_FILE_PATH     
       #- ./scripts/create_update_stack.sh ${BUCKET_NAME}-Stack $S3_CF_TEMPLATE $S3_CF_TEMPLATE_VALUES
    
  post_build:
    commands:
      - bash -c "if [ /"$CODEBUILD_BUILD_SUCCEEDING/" == /"0/" ]; then exit 1; fi"
      - export S3_BKT_POICY=s3bktpolicy

      - export output=$(cat s3/s3-cft-values.json | jq -e '.[]' | jq 'split("=")' | jq 'any(.== "s3bktpolicy")') 
      - echo "output = $output"
      - |
        if [[ "$output" == *"true"* ]]
        then 
          echo "s3 bucket policy value exists"          
          export POLICY_PATH=$(cat s3/s3-cft-values.json | jq .[5] | jq 'split("=")' | jq -r .[1])
          echo "POLICY_PATH $POLICY_PATH"
          aws s3api put-bucket-policy --bucket ${BUCKET_NAME} --policy file://$POLICY_PATH
        fi
      - echo "post_build" 
      - aws s3 ls s3://`echo $BUCKET_NAME`       
      - sed -i "s/@BUCKET_NAME@/$BUCKET_NAME/g" $SNS_MESSAGE    
      - cat $SNS_MESSAGE
      - aws sns publish --topic-arn $SNS_TOPIC__ARN_NOTIFY_STATUS --subject  "AWS S3 Create/Update Status" --message file://$SNS_MESSAGE   
